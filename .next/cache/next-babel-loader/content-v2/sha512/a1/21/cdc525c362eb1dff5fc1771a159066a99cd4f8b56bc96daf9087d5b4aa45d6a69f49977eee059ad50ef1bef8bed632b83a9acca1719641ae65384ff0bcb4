{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mac/Desktop/\\u110C\\u1161\\u1100\\u1175\\u110C\\u116E\\u1103\\u1169\\u1112\\u1161\\u11A8\\u1109\\u1173\\u11B8/react/Nextjstest/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport { Fragment } from \"react\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport Head from 'next/head';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n} //동적 페이지가 프리 제너레이트 될 동적 컴포넌트의 ID를 적어주는 서버 사이드 함수\n//fallback은 nextjs에게 paths 배열이 모든 지원되는 매개변수를 저장할지 아니면 일부만 저장할지 말해줍니다.\n\n\nexport async function getStaticPaths() {\n  //db연결\n  const client = await MongoClient.connect(\"mongodb+srv://Cluster0:hDe1PzJfhggomi7M@cluster0.ydtpokz.mongodb.net/?retryWrites=true&w=majority\"); //데이터베이스 생성\n\n  const db = client.db(); //컬렉션의 이름 설정\n\n  const meetupsCollection = db.collection(\"meetups\"); //첫번째 객체로 모든 객체를 가져오고 모든 문서가 추출되어야 하는 필드를 정의하는 \n\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); //ID는 포함하고 다른 필드 값은 포함하지 않는다\n\n  client.close();\n  return {\n    //false가 모든 지원되는 미트업 ID 값을 포함하라는 것\n    //true는 nextjs가 페이지를 동적으로 만들 것\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; // ID 객체\n  //대괄호 사이에 있는 것은 프로퍼티\n  //db연결\n\n  const client = await MongoClient.connect(\"mongodb+srv://Cluster0:hDe1PzJfhggomi7M@cluster0.ydtpokz.mongodb.net/?retryWrites=true&w=majority\"); //데이터베이스 생성\n\n  const db = client.db(); //컬렉션의 이름 설정\n\n  const meetupsCollection = db.collection(\"meetups\"); //첫번째 객체로 모든 객체를 가져오고 모든 문서가 추출되어야 하는 필드를 정의하는 객체 전달\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId) //ObjectId 객체로 문자열을 전환합니다.\n\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/mac/Desktop/자기주도학습/react/Nextjstest/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["Fragment","MongoClient","ObjectId","MeetupDetail","Head","MeetupDetails","props","meetupData","title","description","image","address","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":"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","sourcesContent":["import { Fragment } from \"react\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport Head from 'next/head';\nfunction MeetupDetails(props) {\n  return (\n    <Fragment>\n      <Head>\n        <title>{props.meetupData.title}</title>\n        <meta name='description' content={props.meetupData.description}/>\n      </Head>\n      <MeetupDetail\n        image={props.meetupData.image}\n        title={props.meetupData.title}\n        address={props.meetupData.address}\n        description={props.meetupData.description}\n      />\n    </Fragment>\n  );\n}\n\n//동적 페이지가 프리 제너레이트 될 동적 컴포넌트의 ID를 적어주는 서버 사이드 함수\n//fallback은 nextjs에게 paths 배열이 모든 지원되는 매개변수를 저장할지 아니면 일부만 저장할지 말해줍니다.\nexport async function getStaticPaths() {\n  //db연결\n  const client = await MongoClient.connect(\n    \"mongodb+srv://Cluster0:hDe1PzJfhggomi7M@cluster0.ydtpokz.mongodb.net/?retryWrites=true&w=majority\"\n  );\n  //데이터베이스 생성\n  const db = client.db();\n\n    //컬렉션의 이름 설정\n  const meetupsCollection = db.collection(\"meetups\");\n\n  //첫번째 객체로 모든 객체를 가져오고 모든 문서가 추출되어야 하는 필드를 정의하는 \n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray(); //ID는 포함하고 다른 필드 값은 포함하지 않는다\n  \n  client.close();\n\n  return {\n    //false가 모든 지원되는 미트업 ID 값을 포함하라는 것\n    //true는 nextjs가 페이지를 동적으로 만들 것\n    fallback: false,\n    paths: meetups.map(meetup => ({ params: { meetupId: meetup._id.toString()}})),\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; // ID 객체\n  //대괄호 사이에 있는 것은 프로퍼티\n\n  //db연결\n  const client = await MongoClient.connect(\n    \"mongodb+srv://Cluster0:hDe1PzJfhggomi7M@cluster0.ydtpokz.mongodb.net/?retryWrites=true&w=majority\"\n  );\n  //데이터베이스 생성\n  const db = client.db();\n\n    //컬렉션의 이름 설정\n  const meetupsCollection = db.collection(\"meetups\");\n\n  //첫번째 객체로 모든 객체를 가져오고 모든 문서가 추출되어야 하는 필드를 정의하는 객체 전달\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId),//ObjectId 객체로 문자열을 전환합니다.\n  });\n  \n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description,\n      },\n    },\n  };\n}\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}