{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mac/Desktop/\\u110C\\u1161\\u1100\\u1175\\u110C\\u116E\\u1103\\u1169\\u1112\\u1161\\u11A8\\u1109\\u1173\\u11B8/react/Nextjstest/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n} //동적 페이지가 프리 제너레이트 될 동적 컴포넌트의 ID를 적어주는 서버 사이드 함수\n//fallback은 nextjs에게 paths 배열이 모든 지원되는 매개변수를 저장할지 아니면 일부만 저장할지 말해줍니다.\n\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/mac/Desktop/자기주도학습/react/Nextjstest/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["Fragment","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AACA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,C,CAED;AACA;;;KAZSN,a;;AAsET,eAAeA,aAAf","sourcesContent":["import { Fragment } from \"react\";\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nfunction MeetupDetails(props) {\n  return (\n    <MeetupDetail\n      image={props.meetupData.image}\n      title={props.meetupData.title}\n      address={props.meetupData.address}\n      description={props.meetupData.description}\n    />\n  );\n}\n\n//동적 페이지가 프리 제너레이트 될 동적 컴포넌트의 ID를 적어주는 서버 사이드 함수\n//fallback은 nextjs에게 paths 배열이 모든 지원되는 매개변수를 저장할지 아니면 일부만 저장할지 말해줍니다.\nexport async function getStaticPaths() {\n  //db연결\n  const client = await MongoClient.connect(\n    \"mongodb+srv://Cluster0:hDe1PzJfhggomi7M@cluster0.ydtpokz.mongodb.net/?retryWrites=true&w=majority\"\n  );\n  //데이터베이스 생성\n  const db = client.db();\n\n    //컬렉션의 이름 설정\n  const meetupsCollection = db.collection(\"meetups\");\n\n  //첫번째 객체로 모든 객체를 가져오고 모든 문서가 추출되어야 하는 필드를 정의하는 \n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray(); //ID는 포함하고 다른 필드 값은 포함하지 않는다\n  \n  client.close();\n\n  return {\n    //false가 모든 지원되는 미트업 ID 값을 포함하라는 것\n    //true는 nextjs가 페이지를 동적으로 만들 것\n    fallback: false,\n    paths: meetups.map(meetup => ({ params: { meetupId: meetup._id.toString()}})),\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; // ID 객체\n  //대괄호 사이에 있는 것은 프로퍼티\n\n  //db연결\n  const client = await MongoClient.connect(\n    \"mongodb+srv://Cluster0:hDe1PzJfhggomi7M@cluster0.ydtpokz.mongodb.net/?retryWrites=true&w=majority\"\n  );\n  //데이터베이스 생성\n  const db = client.db();\n\n    //컬렉션의 이름 설정\n  const meetupsCollection = db.collection(\"meetups\");\n\n  //첫번째 객체로 모든 객체를 가져오고 모든 문서가 추출되어야 하는 필드를 정의하는 객체 전달\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId),//ObjectId 객체로 문자열을 전환합니다.\n  });\n  \n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description,\n      },\n    },\n  };\n}\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}